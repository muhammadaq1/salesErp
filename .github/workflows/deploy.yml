name: Deploy SalesERP to VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 300s
        command_timeout: 300s
        script: |
          set -e  # Exit on any error
          export DEBIAN_FRONTEND=noninteractive
          
          echo "[$(date)] Starting deployment..."
          
          # Update system packages
          echo "[$(date)] Updating system packages..."
          apt update -y
          apt upgrade -y
          
          # Install LEMP stack
          echo "[$(date)] Installing LEMP stack..."
          apt install -y nginx mysql-server php8.1-fpm php8.1-mysql php8.1-curl php8.1-gd php8.1-mbstring php8.1-xml php8.1-zip php8.1-mysqli php8.1-common php8.1-opcache unzip git curl net-tools wget
          
          # Configure MySQL first
          echo "[$(date)] Configuring MySQL..."
          # Set MySQL root password to empty for automated setup
          debconf-set-selections <<< 'mysql-server mysql-server/root_password password '
          debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password '
          
          # Start and enable services
          echo "[$(date)] Starting services..."
          systemctl start nginx
          systemctl enable nginx
          echo "Nginx started: $(systemctl is-active nginx)"
          
          systemctl start php8.1-fpm
          systemctl enable php8.1-fpm
          echo "PHP-FPM started: $(systemctl is-active php8.1-fpm)"
          
          systemctl start mysql
          systemctl enable mysql
          echo "MySQL started: $(systemctl is-active mysql)"
          
          # Wait a moment for services to fully start
          sleep 5
          
          # Verify services are running with detailed error reporting
          echo "[$(date)] Verifying services..."
          if ! systemctl is-active --quiet nginx; then
            echo "Nginx failed to start"
            systemctl status nginx
            journalctl -u nginx --no-pager -n 20
            exit 1
          fi
          
          if ! systemctl is-active --quiet php8.1-fpm; then
            echo "PHP-FPM failed to start"
            systemctl status php8.1-fpm
            journalctl -u php8.1-fpm --no-pager -n 20
            exit 1
          fi
          
          if ! systemctl is-active --quiet mysql; then
            echo "MySQL failed to start"
            systemctl status mysql
            journalctl -u mysql --no-pager -n 20
            exit 1
          fi
          
          # Create web directory
          mkdir -p /var/www/html
          
          # Backup existing installation if it exists
          if [ -d "/var/www/html_backup" ]; then
            rm -rf /var/www/html_backup
          fi
          if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html)" ]; then
            mv /var/www/html /var/www/html_backup
            mkdir -p /var/www/html
          fi
          
          # Clone the repository
          cd /tmp
          rm -rf saleserp
          git clone https://github.com/muhammadaq1/salesErp.git saleserp
          cd saleserp
          
          # Copy files to web directory
          cp -R * /var/www/html/
          
          # Set up database configuration
          cp /var/www/html/application/config/database.example.php /var/www/html/application/config/database.php
          
          # Create required directories if they don't exist
          echo "[$(date)] Creating required directories..."
          mkdir -p /var/www/html/application/cache
          mkdir -p /var/www/html/application/ci_sessions
          mkdir -p /var/www/html/uploads
          
          # Set proper ownership and permissions
          echo "[$(date)] Setting file permissions..."
          chown -R www-data:www-data /var/www/html
          chmod -R 755 /var/www/html
          
          # Set writable permissions for specific directories
          chmod -R 777 /var/www/html/assets/ 2>/dev/null || true
          chmod -R 777 /var/www/html/my-assets/ 2>/dev/null || true
          chmod -R 777 /var/www/html/application/config/ 2>/dev/null || true
          chmod -R 777 /var/www/html/application/cache/ 2>/dev/null || true
          chmod -R 777 /var/www/html/application/ci_sessions/ 2>/dev/null || true
          chmod -R 777 /var/www/html/uploads/ 2>/dev/null || true
          
          # Ensure index.php is readable
          chmod 644 /var/www/html/index.php
          
          # Debug: Check web directory contents
          echo "[$(date)] Checking web directory contents..."
          ls -la /var/www/html/
          echo "Checking if index.php exists:"
          if [ -f "/var/www/html/index.php" ]; then
            echo "✓ index.php exists"
            head -5 /var/www/html/index.php
          else
            echo "✗ index.php missing"
          fi
          
          
          # Configure Nginx
          echo "[$(date)] Configuring Nginx..."
          cat > /etc/nginx/sites-available/saleserp << 'NGINXEOF'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              
              server_name 45.61.140.213 _;
              root /var/www/html;
              index index.php index.html index.htm;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              # Disable access to sensitive files
              location ~ /\. {
                  deny all;
                  access_log off;
                  log_not_found off;
              }
              
              location ~ ^/(application|system|vendor)/ {
                  deny all;
                  access_log off;
                  log_not_found off;
              }
              
              # Allow install directory temporarily
              location /install/ {
                  try_files $uri $uri/ /install/index.php?$query_string;
              }
              
              # Main location block
              location / {
                  try_files $uri $uri/ /index.php?/$request_uri;
              }
              
              # PHP processing
              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  include fastcgi_params;
                  
                  # Increase timeout
                  fastcgi_read_timeout 300;
                  fastcgi_connect_timeout 300;
                  fastcgi_send_timeout 300;
              }
              
              # Static files
              location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # Error and access logs
              error_log /var/log/nginx/saleserp_error.log;
              access_log /var/log/nginx/saleserp_access.log;
          }
          NGINXEOF
          
          # Enable site
          rm -f /etc/nginx/sites-enabled/default
          ln -sf /etc/nginx/sites-available/saleserp /etc/nginx/sites-enabled/
          
          # Test and restart nginx
          echo "[$(date)] Testing Nginx configuration..."
          if ! nginx -t; then
            echo "Nginx configuration test failed"
            exit 1
          fi
          
          systemctl restart nginx
          systemctl restart php8.1-fpm
          
          # Wait for services to restart
          sleep 3
          
          # Verify services are still running after restart
          echo "[$(date)] Verifying services after restart..."
          systemctl is-active nginx || (echo "Nginx not running after restart" && systemctl status nginx && exit 1)
          systemctl is-active php8.1-fpm || (echo "PHP-FPM not running after restart" && systemctl status php8.1-fpm && exit 1)
          
          # Setup database (only if not exists)
          echo "[$(date)] Setting up database..."
          mysql -u root -e "CREATE DATABASE IF NOT EXISTS saleserp_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
          mysql -u root -e "CREATE USER IF NOT EXISTS 'erp_user'@'localhost' IDENTIFIED BY 'ErpPassword123!';"
          mysql -u root -e "GRANT ALL PRIVILEGES ON saleserp_db.* TO 'erp_user'@'localhost';"
          mysql -u root -e "FLUSH PRIVILEGES;"
          
          # Test database connection
          echo "[$(date)] Testing database connection..."
          mysql -u erp_user -pErpPassword123! -e "SELECT 1;" saleserp_db
          
          # Import database if tables don't exist
          echo "[$(date)] Checking database tables..."
          TABLE_COUNT=$(mysql -u erp_user -pErpPassword123! -e "SELECT COUNT(*) AS count FROM information_schema.tables WHERE table_schema = 'saleserp_db';" --skip-column-names 2>/dev/null | tail -1)
          if [ "$TABLE_COUNT" = "0" ]; then
            echo "[$(date)] Importing database schema..."
            mysql -u erp_user -pErpPassword123! saleserp_db < /var/www/html/install/sql/install.sql
            echo "[$(date)] Database schema imported successfully"
          else
            echo "[$(date)] Database tables already exist, skipping import"
          fi
          
          # Create default admin user
          echo "[$(date)] Creating default admin user..."
          mysql -u erp_user -pErpPassword123! saleserp_db << 'SQLEOF'
          INSERT IGNORE INTO web_user (user_id, firstname, lastname, email, password, status, user_type, is_active, last_login, ip_address) 
          VALUES (1, 'Admin', 'User', 'admin@saleserp.com', MD5('admin123'), 1, 1, 1, NOW(), '0.0.0.0')
          ON DUPLICATE KEY UPDATE 
          firstname='Admin', lastname='User', email='admin@saleserp.com', password=MD5('admin123'), status=1, user_type=1, is_active=1;
          SQLEOF
          
          echo "[$(date)] Admin user created with credentials:"
          echo "Email: admin@saleserp.com"
          echo "Password: admin123"
          
          # Final verification
          echo "[$(date)] Final system verification..."
          systemctl is-active --quiet nginx && echo "✓ Nginx is running"
          systemctl is-active --quiet php8.1-fpm && echo "✓ PHP-FPM is running" 
          systemctl is-active --quiet mysql && echo "✓ MySQL is running"
          
          # Test web server response
          echo "[$(date)] Testing web server response..."
          
          # Check if port 80 is listening
          if ! netstat -tlnp | grep :80; then
            echo "Port 80 is not listening"
            netstat -tlnp
            exit 1
          fi
          
          # Test web server response
          if curl -f -s -o /dev/null http://localhost; then
            echo "✓ Web server is responding"
          else
            echo "✗ Web server is not responding"
            echo "Checking nginx error logs:"
            tail -10 /var/log/nginx/error.log
            echo "Checking nginx access logs:"
            tail -10 /var/log/nginx/access.log
            echo "Testing with wget:"
            wget -O- http://localhost || true
            exit 1
          fi
          
          # Clean up
          rm -rf /tmp/saleserp
          
          echo "[$(date)] Deployment completed successfully!"
          echo "Access your application at: http://45.61.140.213"
